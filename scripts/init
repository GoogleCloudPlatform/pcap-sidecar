#!/usr/bin/env bash

set -xm

printenv
tcpdump --version

export ENV_FILE='/tcpdump.env'

export MDS_URL='http://metadata.google.internal/computeMetadata/v1'
export MDS_CURL="curl -s -H Metadata-Flavor:Google ${MDS_URL}"

INSTANCE_ID=$(${MDS_CURL}/instance/id)

GAE_ENABLED="${PCAP_GAE:-false}"
echo "PCAP_GAE=${GAE_ENABLED}" >> ${ENV_FILE}

if [ "$GAE_ENABLED" = true ] ; then
  GAE_ENV_FILE="${ENV_FILE}.gae"
  # discover GAE env by inspecting container `gaeapp`
  curl -s --unix-socket /docker.sock \
    '0/containers/gaeapp/json' \
    | jq -crM '.Config.Env[]' \
    | grep --color=never -E '^(GAE_|GOOGLE_|GCLOUD_).*' \
    | sort | uniq > ${GAE_ENV_FILE}
  source ${GAE_ENV_FILE}
  export PCAP_EXEC_ENV='gae'
  export INSTANCE_ID="${INSTANCE_ID}-${GAE_INSTANCE}"
  export K_SERVICE="${GAE_SERVICE}"
  export K_REVISION="${GAE_VERSION}"
  _GCP_ZONE=$(${MDS_CURL}/instance/zone)
  export GCP_REGION=${_GCP_ZONE##*/}
  cat ${GAE_ENV_FILE} >> ${ENV_FILE}
else
  export PCAP_EXEC_ENV='run'
  export GOOGLE_CLOUD_PROJECT=$(${MDS_CURL}/project/project-id)
  export GCLOUD_PROJECT="${GOOGLE_CLOUD_PROJECT}"
  echo "GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}" >> ${ENV_FILE}
  _GCP_REGION=$(${MDS_CURL}/instance/region)
  export GCP_REGION=${_GCP_REGION##*/}
fi

PCAP_EXT="${PCAP_FILE_EXT:-pcap}"
PCAP_GZIP="${PCAP_COMPRESS:-true}" # compressing is strongly recommended
PCAP_DATE="$(date +'%Y/%m/%d/%H-%M' | tr -d '\n')"
PCAP_MNT="${GCS_MOUNT:-/pcap}"
PCAP_TMP="${GCS_MOUNT:-/pcap}-tmp"
PCAP_FILE="${PCAP_TMP}/part"
GCS_DIR="${GOOGLE_CLOUD_PROJECT}/${PCAP_EXEC_ENV}/${K_SERVICE}/${GCP_REGION}/${K_REVISION}/${PCAP_DATE}/${INSTANCE_ID}"
PCAP_DIR="${PCAP_MNT}/${GCS_DIR}"

PCAP_JSONDUMP="${PCAP_JSON:-false}"
PCAP_JSONDUMP_LOG="${PCAP_JSON_LOG:-false}"

# short-rotate-secs == small-pcap-files
# If APP is data intensive: keep this value small to avoid memory saturation
PCAP_SECS=${PCAP_ROTATE_SECS:-60}

# for Cloud Run gen1 snapshot length cannot be 0
PCAP_SNAPLEN=${PCAP_SNAPSHOT_LENGTH:-65536}

echo "PCAP_DEBUG=${PCAP_DEBUG:-false}" >> ${ENV_FILE}

echo "PCAP_SUPERVISOR_PORT=${PCAP_SUPERVISOR_PORT:-23456}" >> ${ENV_FILE}

echo "PCAP_COMPAT=${PCAP_COMPAT:-false}" >> ${ENV_FILE}
echo "PCAP_EXEC_ENV=${PCAP_EXEC_ENV}" >> ${ENV_FILE}
echo "PROJECT_ID=${GOOGLE_CLOUD_PROJECT}" >> ${ENV_FILE}
echo "GCP_REGION=${GCP_REGION}" >> ${ENV_FILE}
echo "APP_SERVICE=${K_SERVICE}" >> ${ENV_FILE}
echo "APP_REVISION=${K_REVISION}" >> ${ENV_FILE}
echo "APP_VERSION=${K_REVISION}" >> ${ENV_FILE}
echo "INSTANCE_ID=${INSTANCE_ID}" >> ${ENV_FILE}
echo 'APP_SIDECAR=tcpdump' >> ${ENV_FILE}
echo "GCS_DIR=${GCS_DIR}" >> ${ENV_FILE}
echo "PCAP_EXT=${PCAP_EXT}" >> ${ENV_FILE}
echo "PCAP_GZIP=${PCAP_GZIP}" >> ${ENV_FILE}
echo "PCAP_DATE=${PCAP_DATE}" >> ${ENV_FILE}
echo "PCAP_MNT=${PCAP_MNT}" >> ${ENV_FILE}
echo "PCAP_TMP=${PCAP_TMP}" >> ${ENV_FILE}
echo "PCAP_FILE=${PCAP_FILE}" >> ${ENV_FILE}
echo "PCAP_DIR=${PCAP_DIR}" >> ${ENV_FILE}

echo "PCAP_GCS_BUCKET=${PCAP_GCS_BUCKET}" >> ${ENV_FILE}
echo "GCS_BUCKET=${PCAP_GCS_BUCKET}" >> ${ENV_FILE}
echo "PCAP_IFACE=${PCAP_IFACE:-eth}" >> ${ENV_FILE}
echo "PCAP_SECS=${PCAP_SECS}" >> ${ENV_FILE}
echo "PCAP_SNAPLEN=${PCAP_SNAPLEN}" >> ${ENV_FILE}
echo "PCAP_USE_CRON=${PCAP_USE_CRON:-false}" >> ${ENV_FILE}
echo "PCAP_CRON_EXP=${PCAP_CRON_EXP:--}" >> ${ENV_FILE}
echo "PCAP_TZ=${PCAP_TIMEZONE:-UTC}" >> ${ENV_FILE}
echo "PCAP_TO=${PCAP_TIMEOUT_SECS:-0}" >> ${ENV_FILE}

echo "PCAP_ORDERED=${PCAP_ORDERED:-false}" >> ${ENV_FILE}
echo "PCAP_CONNTRACK=${PCAP_CONNTRACK:-false}" >> ${ENV_FILE}
echo "PCAP_TCPDUMP=${PCAP_TCPDUMP:-true}" >> ${ENV_FILE}
echo "PCAP_JSONDUMP=${PCAP_JSONDUMP}" >> ${ENV_FILE}
echo "PCAP_JSONDUMP_LOG=${PCAP_JSONDUMP_LOG}" >> ${ENV_FILE}

# healtch check TCP port
echo "PCAP_HC_PORT=${PCAP_HC_PORT:-12345}" >> ${ENV_FILE}


# free style BPF filter aka complex filter, if defined: no simple filters will be applied
echo "PCAP_FILTER=${PCAP_FILTER:-DISABLED}" >> ${ENV_FILE}
# simple filter; comma separated list of NETWORK LAYER (L3) protocols to capture traffic to/from
echo "PCAP_L3_PROTOS=${PCAP_L3_PROTOS:-ipv4,ipv6}" >> ${ENV_FILE}
# simple filter; comma separated list of TRANSPORT LAYER (L4) protocols to capture traffic to/from
echo "PCAP_L4_PROTOS=${PCAP_L4_PROTOS:-tcp,udp}" >> ${ENV_FILE}
# simple filter; comma separated list of IPv4 (addresses and networks/CIDR) to capture traffic to/from
echo "PCAP_IPV4=${PCAP_IPV4:-ALL}" >> ${ENV_FILE}
# simple filter; comma separated list of IPv6 (addresses and networks/CIDR) to capture traffic to/from
echo "PCAP_IPV6=${PCAP_IPV6:-ALL}" >> ${ENV_FILE}
# simple filter; comma separated list of FQDNs (hosts) to capture traffic to/from
echo "PCAP_HOSTS=${PCAP_HOSTS:-ALL}" >> ${ENV_FILE}
# simple filter; comma separated list of transport layer addresses (ports) to capture traffic to/from
echo "PCAP_PORTS=${PCAP_PORTS:-ALL}" >> ${ENV_FILE}
# simple filter; comma separated list of lowercase TCP flags that a segment must contain to be captured
echo "PCAP_TCP_FLAGS=${PCAP_TCP_FLAGS:-ALL}" >> ${ENV_FILE}

# Create both paths to store PCAP files
mkdir -pv ${PCAP_MNT}
mkdir -pv ${PCAP_TMP}

echo "[INFO] - PCAP files will be available at: gs://${PCAP_GCS_BUCKET}/${GCS_DIR}"

trap 'kill -TERM $PCAP_PID' TERM INT
/bin/supervisord --configuration=/tcpdump.conf --env-file=${ENV_FILE} &
export PCAP_PID=$!
echo "[INFO] – PCAP sidecar started w/PID: ${PCAP_PID}"
wait ${PCAP_PID}
trap - TERM INT
wait ${PCAP_PID}
echo "[INFO] – PCAP sidecar ( PID: ${PCAP_PID} ) exited"
