#!/usr/bin/env bash

# set -eux -o pipefail

# this script requires exactly 1 argument: the full container image URI
if [ "${1}" = "" ]
then
  echo "Usage: $0 <docker_image_uri>"
  exit
fi

export MAIN_PID=$$
export BIN_DIR="$(pwd)/bin"
export BASE_IMAGE_DIR="$(pwd)/base-image"

if [ -d ${BIN_DIR} ]; then
  echo "cleaning release directory: ${BIN_DIR}"
  rm -rvf ${BIN_DIR}/*
else
  echo "creating release directory: ${BIN_DIR}"
  mkdir -p ${BIN_DIR}
fi

function docker_build_base {
  DOCKER_FILE="${BASE_IMAGE_DIR}/${1}.Dockerfile"
  echo "building: ${DOCKER_FILE}"
  docker buildx build --no-cache \
    --file=${DOCKER_FILE} \
    -t ${2}:latest ${BASE_IMAGE_DIR}
  if [ $? -ne 0 ]; then
    echo "failed to build: ${DOCKER_FILE}"
    kill -s TERM $MAIN_PID
  fi
}

function docker_build {
  echo "building: ${1}"
  docker buildx build \
    --platform=linux/amd64 \
    --file=${1}/Dockerfile \
    --no-cache --output ${BIN_DIR} \
    --target releaser ${1}
  if [ $? -ne 0 ]; then
    echo "failed to build: ${1}"
    kill -s TERM $MAIN_PID
  fi
}

docker_build_base pcap pcap-base
docker_build_base sidecar pcap-sidecar
docker_build_base golang pcap-golang

docker_build $(pwd)/pcap-fsnotify
docker_build $(pwd)/supervisord
docker_build $(pwd)/tcpdumpw

# build `tcpdump` sidecar image
docker buildx build \
  --platform=linux/amd64 \
  --file=$(pwd)/Dockerfile \
  --no-cache -t ${1} $(pwd)
